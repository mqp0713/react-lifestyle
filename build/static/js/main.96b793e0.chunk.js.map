{"version":3,"sources":["Counter.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Counter","props","_this","Object","classCallCheck","this","console","log","possibleConstructorReturn","getPrototypeOf","call","state","counter","handleIncrease","bind","assertThisInitialized","nextProps","nextState","count","addCounter","setState","react_default","a","createElement","onClick","Component","defaultProps","App","_this2","className","src","logo","alt","href","target","rel","handleProps","src_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4RAEMA,cAML,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACjBM,QAAQC,IAAI,uBACZL,EAAAC,OAAAK,EAAA,EAAAL,CAAAE,KAAAF,OAAAM,EAAA,EAAAN,CAAAH,GAAAU,KAAAL,KAAMJ,KACDU,MAAQ,CACZC,QAAS,GAEVV,EAAKW,eAAiBX,EAAKW,eAAeC,KAApBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KANLA,oFAUjBI,QAAQC,IAAI,yEAIZD,QAAQC,IAAI,8EAGaS,GACzBV,QAAQC,IAAI,mCAAmCS,iDAG1BA,EAAWC,GAEhC,OADAX,QAAQC,IAAI,+BAA+BS,EAAUC,GAC9CZ,KAAKJ,MAAMiB,QAAUF,EAAUE,oDAItCZ,QAAQC,IAAI,2EAIZD,QAAQC,IAAI,4EAIZD,QAAQC,IAAI,wEAIZ,IAAIY,EAAad,KAAKM,MAAMC,QAE5BP,KAAKe,SAAS,CACbR,QAASO,EAAa,qCAMvB,OAFAb,QAAQC,IAAI,iBAGXc,EAAAC,EAAAC,cAAA,mDACclB,KAAKJ,MAAMiB,MACxBG,EAAAC,EAAAC,cAAA,WAFD,wCAGclB,KAAKM,MAAMC,QACxBS,EAAAC,EAAAC,cAAA,UAAQC,QAASnB,KAAKQ,gBAAtB,oCA3DkBY,aAAhBzB,EAEE0B,aAAe,CACrBR,MAAO,GA8DMlB,QCtBA2B,cAvCb,SAAAA,IAAa,IAAAzB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,IACXzB,EAAAC,OAAAK,EAAA,EAAAL,CAAAE,KAAAF,OAAAM,EAAA,EAAAN,CAAAwB,GAAAjB,KAAAL,QACKM,MAAO,CACVO,MAAO,GAHEhB,mFAOXI,QAAQC,IAAI,8DAGZF,KAAKe,SAAS,CACZF,MAAO,uCAGF,IAAAU,EAAAvB,KAEP,OADAC,QAAQC,IAAI,aAEVc,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAA,UAAQM,UAAU,cAChBR,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCX,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEM,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQAd,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMI,EAAKQ,gBAA5B,2DAEFf,EAAAC,EAAAC,cAACc,EAAD,CAASnB,MAAOb,KAAKM,MAAMO,gBAlCjBO,aCOEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.96b793e0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Counter extends Component {\n\t// 设置默认 props 的值\n\tstatic defaultProps = {\n\t\tcount: 0,\n\t};\n\t// 构造函数 construcor\n\tconstructor(props){\n\t\tconsole.log('counterConstructor');\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcounter: 0,\n\t\t};\n\t\tthis.handleIncrease = this.handleIncrease.bind(this);\n\t}\n\t// componentWillMount()\n\tcomponentWillMount(){\n\t\tconsole.log('counterComponentWillMount');\n\t}\n\t// componentDidMount\n\tcomponentDidMount(){\n\t\tconsole.log('counterComponentDidMount');\n\t}\n\t// componentWillReceiveProps\n\tcomponentWillReceiveProps(nextProps){\n\t\tconsole.log('counterComponentWillReceiveProps',nextProps);\n\t}\n\t// shouldComponentUpdate\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\tconsole.log('counterShouldComponentUpdate',nextProps,nextState);\n\t\treturn this.props.count !== nextProps.count;\n\t}\n\t// componentWillUpdate\n\tcomponentWillUpdate(){\n\t\tconsole.log('counterComponentWillUpdate');\n\t}\n\t// componentDidUpdate\n\tcomponentDidUpdate(){\n\t\tconsole.log('counterComponentDidUpdate');\n\t}\n\t// componentWillUnmount\n\tcomponentWillUnmount(){\n\t\tconsole.log('counterComponentWillUnmount');\n\t}\n\t// 点击增加1\n\thandleIncrease(){\n\t\tlet addCounter = this.state.counter;\n\t\t\n\t\tthis.setState({\n\t\t\tcounter: addCounter + 1\n\t\t})\n\t}\n  render() {\n\t\tconsole.log('counterRender');\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t当前 props 值为：{this.props.count}\n\t\t\t\t<br />\n\t\t\t\t当前 state 值为：{this.state.counter}\n\t\t\t\t<button onClick={this.handleIncrease}>点击增加</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Counter;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Counter from './Counter';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state ={\n      count: 0\n    }\n  }\n  componentDidMount(){\n    console.log('appComponentDidMount');\n  }\n  handleProps(){\n    this.setState({\n      count: 666,\n    })\n  }\n  render() {\n    console.log('appRender');\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <button onClick={() => this.handleProps()}>点击改变子组件的 props</button>\n        </header>\n        <Counter count={this.state.count}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}